#!/sbin/sh
# Copyright (C) 2018 ATG Droid 
# Copyright (C) 2018 PitchBlack Recovery <pitchblackrecovery@gmail.com>
# Copyright (C) 2018 Batik Recovery <hifzhan41@gmail.com>
# Copyright (C) 2018 Nusantara Recovery <ayrahikari@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License-|";
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD ;
    shift;
  done;
}

show_progress() { echo "progress $1 $2" > /proc/self/fd/$2; }
set_perm_recursive() {
  dirs=$(echo $* | awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    chown -R $1.$2 $i; chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
abort() { ui_print "$*"; exit 1; }

if [ -f "/tmp/nusantara" ]; then
rm -rf "/tmp/nusantara"
fi

mkdir -p /tmp/nusantara;
cd /tmp/nusantara;
unzip -o "$ZIP";
show_progress 0.1000000, 0;
ui_print "|---------------------------------------------------|";
ui_print "|-  _   _                       _                  -|";
ui_print "|- | \ | |                     | |                 -|";
ui_print "|- |  \| |_   _ ___  __ _ _ __ | |_ __ _ _ __ __ _ -|";
ui_print "|- | . ' | | | / __|/ _' | '_ \| __/ _' | '__/ _' |-|";
ui_print "|- | |\  | |_| \__ \ (_| | | | | || (_| | | | (_| |-|";
ui_print "|- |_| \_|\__,_|___/\__,_|_| |_|\__\__,_|_|  \__,_|-|";
ui_print "|-     ____                                        -|";
ui_print "|-    |  _ \ ___  ___ _____   _____ _ __ _   _     -|";
ui_print "|-    | |_) / _ \/ __/ _ \ \ / / _ \ '__| | | |    -|";
ui_print "|-    |  _ <  __/ (_| (_) \ V /  __/ |  | |_| |    -|";
ui_print "|-    |_| \_\___|\___\___/ \_/ \___|_|   \__, |    -|";
ui_print "|-                                       |___/     -|";
ui_print "|---------------------------------------------------|";
/sbin/busybox mount /system;
NR=/tmp/nusantara/Nusantara
IMG=/tmp/nusantara/TWRP/recovery.img
ETC=/system/etc/install-recovery.sh
NR1_PATH=/sdcard/nusantara/tools
NR2_PATH=/sdcard/nusantara/tools1
NR3_PATH=/sdcard/nusantara/tools2
NR4_PATH=/sdcard/TWRP/tools
RES=/sdcard/nusantara/
OLD=/sdcard/TWRP/
red='\033[0;31m'
RECOVERY=/dev/recovery

if [ -f "$(readlink -f "$RECOVERY")" ]; then
	DD=true
	break
elif [[ ! -f "$(readlink -f "$RECOVERY")" ] || [ -f "$RECOVERY" ]]; then
	DD=false
	break
else
recovery_partition() {
	chk_syml() {
		RECOVERY=$(readlink -f "$RECOVERY")
		# symlink
		if [ -f "$RECOVERY" ]; then
			DD=true
		elif [ -b "$RECOVERY" ]; then
			case "$RECOVERY" in
				/dev/block/bml*|/dev/block/mtd*|/dev/block/mmc*)
					DD=false ;;
				*)
					DD=true ;;
			esac
		# otherwise we have to keep trying other locations
		else
			return 1
		fi
		ui_print "- Found recovery partition at: $RECOVERY"
	}
	# if we already have recovery block set then verify and use it
	[ "$RECOVERY" ] && chk_syml && return
	# otherwise, time to go hunting!
	if [ -f /etc/recovery.fstab ]; then
		# recovery fstab v1
		RECOVERY=$(awk '$1 == "/recovery" {print $3}' /etc/recovery.fstab)
		[ "$RECOVERY" ] && chk_syml && return
		# recovery fstab v2
		RECOVERY=$(awk '$2 == "/recovery" {print $1}' /etc/recovery.fstab)
		[ "$RECOVERY" ] && chk_syml && return
	fi
	for fstab in /fstab.*; do
		[ -f "$fstab" ] || continue
		# device fstab v2
		RECOVERY=$(awk '$2 == "/recovery" {print $1}' "$fstab")
		[ "$RECOVERY" ] && chk_syml && return
		# device fstab v1
		RECOVERY=$(awk '$1 == "/recovery" {print $3}' "$fstab")
		[ "$RECOVERY" ] && chk_syml && return
	done
	if [ -f /proc/emmc ]; then
		# emmc layout
		RECOVERY=$(awk '$4 == "\"recovery\"" {print $1}' /proc/emmc)
		[ "$RECOVERY" ] && RECOVERY=/dev/block/$(echo "$RECOVERY" | cut -f1 -d:) && chk_syml && return
	fi
	if [ -f /proc/mtd ]; then
		# mtd layout
		RECOVERY=$(awk '$4 == "\"recovery\"" {print $1}' /proc/mtd)
		[ "$RECOVERY" ] && RECOVERY=/dev/block/$(echo "$RECOVERY" | cut -f1 -d:) && chk_syml && return
	fi
	if [ -f /proc/dumchar_info ]; then
		# mtk layout
		RECOVERY=$(awk '$1 == "/recovery" {print $5}' /proc/dumchar_info)
		[ "$RECOVERY" ] && chk_syml && return
	fi
	abort "Failed to Find RECOVERY Partition";
	
}
fi

#Deletion
	rm $ETC
	rm -rf $NR1_PATH
	rm -rf $NR2_PATH
	rm -rf $NR3_PATH
	rm -rf $NR4_PATH

#Flashing
if [ "$DD" ]; then
	if [ "$DD" == "true" ]; then
		dd if=$IMG of="$RECOVERY"
	else
		flash_image $RECOVERY $IMG
	fi
else
	recovery_partition;
	if [ $? = 0 ]; then
		if $DD; then
			dd if=$IMG of="$RECOVERY"
		else
			flash_image $RECOVERY $IMG
		fi
	else
		abort "Failed to write recovery image!" 43;
	fi
fi

#Copy Specific Files
if [ -f "/sdcard/nusantara" ]; then
cp -r $NR/tools /sdcard/nusantara/
else
mkdir -p /sdcard/nusantara
cp -r $NR/tools /sdcard/nusantara/
fi

ui_print "|---------------------------------------------|";
ui_print "|---------------------------------------------|";
ui_print "|                  THANK YOU                  |";
ui_print "|      REBOOTING INTO NUSANTARA RECOVERY      |";
ui_print "|---------------------------------------------|";
sleep 5s
show_progress 0.1000000, 90 ;
ui_print "|------------INSTALLATION FINISHED!-----------|";
/sbin/unmount /system;
reboot recovery;
